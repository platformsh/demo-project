name: Node.js CI

on:
  pull_request:
    branches:
    - main 

env:
    MAX_HIGH: 0
    MAX_CRITICAL: 0

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # These versions match Upsun support
        #   Node.js: https://docs.upsun.com/languages/nodejs.html#supported-versions
        node-version: [18.x, 20.x, 21.x]
        #   Python: https://docs.upsun.com/languages/python.html#supported-versions
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      ################################################################################################
      # A. Setup workflow.
      - name: "1. Retrieve local files."
        uses: actions/checkout@v4
        with:
            ref: ${{ github.event.pull_request.head.sha }}
      - name: "2. Set up Node.js."
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: "3. Python."
        uses: actions/setup-python@v4 
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      ################################################################################################
      # B. Prettify, lint, and test repo.
      - name: "4. Set up Bun"
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: "5. Preparing"
        run: |
          echo "::notice::Running react-scripts tests."
          export CI=true
          npm install cross-env npm-run-all -g
          npm install
          cd frontend && bun install
      - name: "6. Verifying backend code is pretty"
        run: |
          npm run prettier:backend
      - name: "7. Verifying frontend code is pretty"
        run: |
          npm run prettier:frontend
      - name: "8. Linting frontend"
        run: npm run lint:frontend
      - name: "9. Run Frontend tests"
        run: npm run test:frontend
      - name: "10. Run Backend linting"
        run: |
          npm run lint:backend

      ################################################################################################
      # C. Ensure no vulnerabilities.
      - name: "11. Test: there should be no Python vulnerabilities."
        run: |
          echo "::notice::Checking for vulnerabilities in backend Python app dependencies."
          npm run test:backend
      - name: "12. Test: there should be no HIGH Node.js vulnerabilities."
        run: |
          echo "::notice::Checking for high vulnerabilities in frontend Node.js app dependencies."
          cd frontend
          export CI=true
          HIGH_VULN_ALLOWED=${{ env.MAX_HIGH }}
          HIGH_VULN=$(bun pm audit --json 2>/dev/null | jq '.vulnerabilities.high // 0')
          if [ "$HIGH_VULN" -gt "$HIGH_VULN_ALLOWED" ]; then
              echo "::error::Bun HIGH vulnerabilities exceed allowed budget."
              bun pm audit
              exit 1
          else
              echo "::notice::No HIGH vulnerabilities found on frontend app."
          fi
      - name: "13. Test: there should be no CRITICAL Node.js vulnerabilities."
        run: |
          echo "::notice::Checking for critical vulnerabilities in frontend Node.js app dependencies."
          cd frontend
          export CI=true
          CRITICAL_VULN_ALLOWED=${{ env.MAX_CRITICAL }}
          CRITICAL_VULN=$(bun pm audit --json 2>/dev/null | jq '.vulnerabilities.critical // 0')
          if [ "$CRITICAL_VULN" -gt "$CRITICAL_VULN_ALLOWED" ]; then
              echo "::error::Bun CRITICAL vulnerabilities exceed allowed budget."
              bun pm audit
              exit 1
          else
              echo "::notice::No CRITICAL vulnerabilities found on frontend app."
          fi
